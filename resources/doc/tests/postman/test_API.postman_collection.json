{
	"info": {
		"_postman_id": "4e47934e-7981-4170-ad6b-ab86d8951f3c",
		"name": "test_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test [users]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"token\");\r",
									"const t = parseInt(pm.environment.get('temps'))\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of users should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"console.log(\"Total = \" + pm.response.json().data.total)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"users"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Email not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.email).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Email not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.email).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Id not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Id not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.environment.set('id', pm.response.json().data.data.id)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"Email = \" + pm.response.json().data.data.email)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = \"juantshamblin\" + Math.floor((Math.random() * 500) + 1) + \"@up.coop\";\r",
									"const password = \"Azertyuiop\" + Math.floor((Math.random() *500 ) + 1);\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"pm.variables.set('password', JSON.stringify(password));\r",
									"pm.environment.set('email',email);\r",
									"pm.environment.set('motdepasse', password);\r",
									"console.log(email);\r",
									"console.log(password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"name\": \"Juan T. Shamblin\",\n    \"profile_id\" : \"1\",\n    \"password\": {{password}},\n    \"password_confirmation\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"users"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of users should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Total = \" + pm.response.json().data.total)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"users"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Email not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.email).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Email not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.email).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"});\r",
									"\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Email = \" + pm.response.json().data.email)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/users/:user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"users",
								":user"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "user",
									"value": "{{id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Email not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.email).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Email not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.email).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Email = \" + pm.response.json().data.email)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = \"jtshamblin\" + Math.floor((Math.random() * 500) + 1) + \"@up.coop\";\r",
									"const password = \"qwerty\" + Math.floor((Math.random() *500 ) + 1);\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"pm.variables.set('password', JSON.stringify(password))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"name\": \"Juan T. Shamblin\",\n    \"new_password\": {{password}},\n    \"new_password_confirmation\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/users/:user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"users",
								":user"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "user",
									"value": "{{id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Email not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.email).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Email not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.email).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"});\r",
									"\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Email = \" + pm.response.json().data.email)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/users/:user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"users",
								":user"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "user",
									"value": "{{id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Email not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.email).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Email not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.email).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"});\r",
									"\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Email = \" + pm.response.json().data.email)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = \"jts\" + Math.floor((Math.random() * 500) + 1) + \"@up.coop\";\r",
									"const password = \"tiktaktoe\" + Math.floor((Math.random() *500 ) + 1);\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"pm.variables.set('password', JSON.stringify(password))\r",
									"pm.environment.set('email', email)\r",
									"pm.environment.set('motdepasse', password)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"name\": \"Juan T. Shamblin\",\n    \"new_password\": {{password}},\n    \"new_password_confirmation\": {{password}}\n}\n"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/users/:user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"users",
								":user"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "user",
									"value": "{{id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Email not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.email).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Email not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.email).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"});\r",
									"\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Email = \" + pm.response.json().data.email)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/users/:user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"users",
								":user"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "user",
									"value": "{{id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [account/password]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \"  + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = pm.environment.get('email');\r",
									"const motdepasse = pm.environment.get('motdepasse');\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"pm.variables.set('motdepasse', JSON.stringify(motdepasse));\r",
									"console.log(email)\r",
									"console.log(motdepasse);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{motdepasse}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request password change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if email sent\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"Email is being sent\")\r",
									")\r",
									"\r",
									"console.log(\"Message = \"+ pm.response.json().message)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = pm.environment.get('email')\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}}\n}\n\n"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/account/password/forgot",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"account",
								"password",
								"forgot"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Passsword updated ?\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"Password updated successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Message = \" + pm.response.json().message)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = \"up.coop\" + Math.floor((Math.random() * 500) + 1)\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"console.log(motdepasse)\r",
									"pm.environment.set('motdepasse',motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": {{password}},\n    \"password_confirmation\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/account/password/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"account",
								"password",
								"update"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									"\r",
									")\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = pm.environment.get('email');\r",
									"const motdepasse = pm.environment.get('motdepasse');\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"console.log(email);\r",
									"console.log(motdepasse);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [tokens]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"user field not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.user).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"user field not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.user).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"abilities field not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.abilities).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"abilities field not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.abilities).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"tokken not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.token).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"tokken not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.token).is.not.undefined\r",
									"});\r",
									"\r",
									"console.log(pm.response.json().id)\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.environment.set('id_token', pm.response.json().data.id)\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"User = \" + pm.response.json().data.user)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const id = pm.environment.get('id')\r",
									"pm.variables.set('id', JSON.stringify(id));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Token Test\",\n    \"user_id\": {{id}},\n    \"abilities\" : [\"*\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"tokens"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of tokens should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"tokens"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"abilities field not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.abilities).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"abilities field not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.abilities).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"tokkenable not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.tokenable).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"tokkenable not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.tokenable).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Tokenable = \" + pm.response.json().data.data.tokenable)\r",
									"console.log(\"Abilities = \" + pm.response.json().data.data.abilities)\r",
									"console.log(\"Name = \" + pm.response.json().data.data.name)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/tokens/:token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"tokens",
								":token"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "token",
									"value": "{{id_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/tokens/:token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"tokens",
								":token"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "token",
									"value": "{{id_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/tokens/:token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"tokens",
								":token"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "token",
									"value": "{{id_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [beneficiaires]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(pm.response.json().data.token)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/users/:user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"users",
								":user"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "user",
									"value": "{{id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/users/:user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"users",
								":user"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "user",
									"value": "{{id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of beneficiaries should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(pm.response.json().data.total)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/beneficiaries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"beneficiaries"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.first_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.first_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.last_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.last_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"email not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.email).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"email not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.email).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"profile not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.profile).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"profile not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.profile).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.service_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.service_id).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"first_name = \" + pm.response.json().data.data.first_name)\r",
									"console.log(\"last_name = \" + pm.response.json().data.data.last_name)\r",
									"console.log(\"email = \" + pm.response.json().data.data.email)\r",
									"console.log(\"profile = \" + pm.response.json().data.data.profile)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"address_id = \" + pm.response.json().data.data.address_id)\r",
									"console.log(\"service_id = \" + pm.response.json().data.data.service_id)\r",
									"pm.environment.set('id_beneficiaire', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"1234567890114758ADCE\" + Math.floor((Math.random() * 500) + 1);\r",
									"const email = \"kathleenmadams\"+ Math.floor((Math.random() * 500) + 1) + \"@up.coop\";\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(code);\r",
									"console.log(email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"first_name\": \"Kathleen\",\n    \"last_name\": \"M. Adams\",\n    \"email\":{{email}},\n    \"address_id\": 1,\n    \"service_id\": 1,\n    \"profile\" : \"admin\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/beneficiaries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"beneficiaries"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of beneficiaries should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/beneficiaries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"beneficiaries"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contain Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain code\", function(){\r",
									"    pm.expect(pm.response.json().data.code).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain first_name\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain last_name\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain email\", function(){\r",
									"    pm.expect(pm.response.json().data.email).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain profile\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain active\", function(){\r",
									"    pm.expect(pm.response.json().data.active).not.eql(null);\r",
									"})\r",
									"pm.test(\"Data contain adresse_id\", function(){\r",
									"    pm.expect(pm.response.json().data.adresse_id).not.eql(null);\r",
									"})\r",
									"pm.test(\"Data contain service_id\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).not.eql(null);\r",
									"})\r",
									"\r",
									"console.log(pm.response.json().data)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_beneficiaire}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"email not null\", function(){\r",
									"    pm.expect(pm.response.json().data.email).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"email not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.email).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"profile not null\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"profile not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"first_name= \" + pm.response.json().data.first_name)\r",
									"console.log(\"last_name = \" + pm.response.json().data.last_name)\r",
									"console.log(\"email = \" + pm.response.json().data.email)\r",
									"console.log(\"profile = \" + pm.response.json().data.profile)\r",
									"console.log(\"code = \" + pm.response.json().data.code)\r",
									"console.log(\"address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"service_id = \" + pm.response.json().data.service_id)\r",
									"pm.environment.set('id_adresse', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = \"kma\"+ Math.floor((Math.random() * 500) + 1) + \"@up.coop\";\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Kathleen\",\n    \"last_name\": \"M. Adams\",\n    \"email\": {{email}},\n    \"address_id\": 98,\n    \"address_1\": \"1 Route de Mars\",\n    \"address_2\": \"Etage 1\",\n    \"postal_code\": \"75000\",\n    \"city\": \"Paris\",\n    \"country\": \"France\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_beneficiaire}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contain Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain code\", function(){\r",
									"    pm.expect(pm.response.json().data.code).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain first_name\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain last_name\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain email\", function(){\r",
									"    pm.expect(pm.response.json().data.email).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain profile\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain active\", function(){\r",
									"    pm.expect(pm.response.json().data.active).not.eql(null);\r",
									"})\r",
									"pm.test(\"Data contain adresse_id\", function(){\r",
									"    pm.expect(pm.response.json().data.adresse_id).not.eql(null);\r",
									"})\r",
									"pm.test(\"Data contain service_id\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).not.eql(null);\r",
									"})\r",
									"\r",
									"console.log(pm.response.json().data)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_beneficiaire}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"email not null\", function(){\r",
									"    pm.expect(pm.response.json().data.email).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"email not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.email).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"profile not null\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"profile not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"first_name= \" + pm.response.json().data.first_name)\r",
									"console.log(\"last_name = \" + pm.response.json().data.last_name)\r",
									"console.log(\"email = \" + pm.response.json().data.email)\r",
									"console.log(\"profile = \" + pm.response.json().data.profile)\r",
									"console.log(\"code = \" + pm.response.json().data.code)\r",
									"console.log(\"address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"service_id = \" + pm.response.json().data.service_id)\r",
									"pm.environment.set('id_adresse', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = \"kmadams\"+ Math.floor((Math.random() * 500) + 1) + \"@up.coop\";\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Kathleen\",\n    \"last_name\": \"M. Adams\",\n    \"email\": {{email}},\n    \"address_id\": 98,\n    \"address_1\": \"1 Route de Mars\",\n    \"address_2\": \"Etage 1\",\n    \"postal_code\": \"75000\",\n    \"city\": \"Paris\",\n    \"country\": \"France\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_beneficiaire}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contain Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain code\", function(){\r",
									"    pm.expect(pm.response.json().data.code).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain first_name\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain last_name\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain email\", function(){\r",
									"    pm.expect(pm.response.json().data.email).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain profile\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain active\", function(){\r",
									"    pm.expect(pm.response.json().data.active).not.eql(null);\r",
									"})\r",
									"pm.test(\"Data contain adresse_id\", function(){\r",
									"    pm.expect(pm.response.json().data.adresse_id).not.eql(null);\r",
									"})\r",
									"pm.test(\"Data contain service_id\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).not.eql(null);\r",
									"})\r",
									"\r",
									"console.log(pm.response.json().data)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_beneficiaire}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_beneficiaire}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_beneficiaire}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"pm.environment.unset(\"id_beneficiaire\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [products]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of products should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"products"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.price).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.price).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.price_share).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.price_share).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.environment.set('id_product', pm.response.json().data.data.id)\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" +pm.response.json().data.data.code)\r",
									"console.log(\"Name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"Price = \" + pm.response.json().data.data.price)\r",
									"console.log(\"Price_share = \" + pm.response.json().data.data.price_share)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"TVSAMSUNG\" + Math.floor((Math.random() * 500) + 1);\r",
									"const name = \"TélévisionSamsung4K\" + Math.floor((Math.random() * 500) + 1);\r",
									"const prix = Math.floor((Math.random() * 1000) + 200);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"pm.variables.set('prix', JSON.stringify(prix));\r",
									"console.log(code)\r",
									"console.log(name)\r",
									"console.log(prix)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": {{code}},\r\n  \"name\": {{name}},\r\n  \"price\": {{prix}},\r\n  \"price_share\": 2.5\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"products"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of products should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"products"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not null ?\",\r",
									" () => pm.expect(pm.response.json().data.price).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.price).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not null ?\",\r",
									" () => pm.expect(pm.response.json().data.price_share).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.price_share).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Price = \" + pm.response.json().data.price)\r",
									"console.log(\"Price_share = \" + pm.response.json().data.price_share)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/products/:product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"products",
								":product"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "product",
									"value": "{{id_product}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not null ?\",\r",
									" () => pm.expect(pm.response.json().data.price).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.price).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not null ?\",\r",
									" () => pm.expect(pm.response.json().data.price_share).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.price_share).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Price = \" + pm.response.json().data.price)\r",
									"console.log(\"Price_share = \" + pm.response.json().data.price_share)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"SamsungTV\" + Math.floor((Math.random() * 500) + 1);\r",
									"const name = \"TVSAMSUNG\" + Math.floor((Math.random() * 500) + 1);\r",
									"const prix = Math.floor((Math.random() * 1000) + 200);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"pm.variables.set('prix', JSON.stringify(prix));\r",
									"console.log(code)\r",
									"console.log(name)\r",
									"console.log(prix)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": {{code}},\r\n  \"name\": {{name}},\r\n  \"price\": {{prix}},\r\n  \"price_share\": 4\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/products/:product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"products",
								":product"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "product",
									"value": "{{id_product}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not null ?\",\r",
									" () => pm.expect(pm.response.json().data.price).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.price).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not null ?\",\r",
									" () => pm.expect(pm.response.json().data.price_share).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.price_share).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Price = \" + pm.response.json().data.price)\r",
									"console.log(\"Price_share = \" + pm.response.json().data.price_share)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/products/:product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"products",
								":product"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "product",
									"value": "{{id_product}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not null ?\",\r",
									" () => pm.expect(pm.response.json().data.price).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.price).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not null ?\",\r",
									" () => pm.expect(pm.response.json().data.price_share).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.price_share).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Price = \" + pm.response.json().data.price)\r",
									"console.log(\"Price_share = \" + pm.response.json().data.price_share)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"SAMSUNGTV\" + Math.floor((Math.random() * 500) + 1) + \"PROMO\";\r",
									"const name = \"TVSAMSUNG2021\" + Math.floor((Math.random() * 500) + 1) + \"SOLDE\";\r",
									"const prix = Math.floor((Math.random() * 1000) + 200);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"pm.variables.set('prix', JSON.stringify(prix));\r",
									"console.log(code)\r",
									"console.log(name)\r",
									"console.log(prix)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": {{code}},\r\n  \"name\": {{name}},\r\n  \"price\": {{prix}},\r\n  \"price_share\": 4\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/products/:product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"products",
								":product"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "product",
									"value": "{{id_product}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not null ?\",\r",
									" () => pm.expect(pm.response.json().data.price).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.price).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not null ?\",\r",
									" () => pm.expect(pm.response.json().data.price_share).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Price_share not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.price_share).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Price = \" + pm.response.json().data.price)\r",
									"console.log(\"Price_share = \" + pm.response.json().data.price_share)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/products/:product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"products",
								":product"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "product",
									"value": "{{id_product}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/products/:product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"products",
								":product"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "product",
									"value": "{{id_product}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"});\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/products/:product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"products",
								":product"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "product",
									"value": "{{id_product}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");\r",
									"pm.environment.unset(\"id_product\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [processes]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of processes should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Code not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Description not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Description not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)\r",
									"pm.environment.set('id_process', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"92879827UIIXYZJJHZQ\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"console.log(code);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"description\": \"Description du processe en question\",\n    \"invokable\": \"MorphToClass\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of processes should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Code not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Description not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Description not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Code not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Description not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Description not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"92879827UIHHHHI\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"console.log(code);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"description\": \"Nouvelle description : Description...\",\n    \"invokable\": \"MorphToClass\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Code not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Description not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Description not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Code not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Description not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Description not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"92879827KUKIUII\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"console.log(code);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"description\": \"Maj de la Description...\",\n    \"invokable\": \"MorphToClass\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Code not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Description not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Description not undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [processes/tasks]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(pm.response.json().data.token)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"process id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.process.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"process id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.process.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"status id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"status id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"available_at not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.available_at).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"available_at not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.available_at).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"comment not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.comment).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"comment not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.comment).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"attempts not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.attempts).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"attempts not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.attempts).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"process id = \" + pm.response.json().data.data.process.id)\r",
									"console.log(\"status id = \" + pm.response.json().data.data.status.id)\r",
									"console.log(\"available_at = \" + pm.response.json().data.data.available_at)\r",
									"console.log(\"comment = \" + pm.response.json().data.data.comment)\r",
									"console.log(\"attempts = \" + pm.response.json().data.data.attempts)\r",
									"pm.environment.set('id_task', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"process_id\": 1,\n  \"status_id\": 1,\n  \"attempts\": 1,\n  \"payload\": 1,\n  \"comment\": \"Commentaire blabla ...\",\n  \"available_at\": \"tomorrow\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process",
								"tasks"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of tasks should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process",
								"tasks"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"process_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.process.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"process_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.process.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"status id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"status id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"available_at not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.available_at).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"available_at not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.available_at).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"comment not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.comment).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"comment not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.comment).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"process.id = \" + pm.response.json().data.data.process.id)\r",
									"console.log(\"status.id = \" + pm.response.json().data.data.status.id)\r",
									"console.log(\"available_at = \" + pm.response.json().data.data.available_at)\r",
									"console.log(\"comment = \" + pm.response.json().data.data.comment)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process/tasks/:task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process",
								"tasks",
								":task"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								},
								{
									"key": "task",
									"value": "{{id_task}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process/tasks/:task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process",
								"tasks",
								":task"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								},
								{
									"key": "task",
									"value": "{{id_task}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process/tasks/:task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process",
								"tasks",
								":task"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								},
								{
									"key": "task",
									"value": "{{id_task}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "{{id_process}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"pm.environment.unset(\"id_process\");\r",
									"pm.environment.unset(\"id_task\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [customers]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of customers should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"customers"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.data.contact_name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.data.address_id)\r",
									"pm.environment.set('id_customer', pm.response.json().data.data.id)\r",
									"pm.environment.set('customer_code', pm.response.json().data.data.code)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"2628772687558769655XYZ\" + Math.floor((Math.random() * 500) + 1);\r",
									"const bo_reference = \"92879827UXYZWWSZZ\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"console.log(code);\r",
									"console.log(bo_reference);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"bo_reference\": {{bo_reference}},\n    \"name\": \"Jose L. Robinson\",\n    \"contact_name\": \"Roger J. Turnage\",\n    \"active\": false,\n    \"address_id\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"customers"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of customers should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"customers"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.contact_name)\r",
									"console.log(\"Adress_id = \" + pm.response.json().data.address_id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_customer}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.contact_name)\r",
									"console.log(\"Adress_id = \" + pm.response.json().data.address_id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"2628772687XYZ\" + Math.floor((Math.random() * 500) + 1);\r",
									"const bo_reference = \"92879827UII222ABC\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"console.log(code);\r",
									"console.log(bo_reference);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"bo_reference\": {{bo_reference}},\n    \"name\": \"Jose L. Robinson\",\n    \"contact_name\": \"Robert\",\n    \"active\": false,\n    \"address_id\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_customer}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.contact_name)\r",
									"console.log(\"Adress_id = \" + pm.response.json().data.address_id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_customer}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.contact_name)\r",
									"console.log(\"Adress_id = \" + pm.response.json().data.address_id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"2628772687ABC\" + Math.floor((Math.random() * 500) + 1);\r",
									"const bo_reference = \"92879827UII2235522XYZ\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"console.log(code);\r",
									"console.log(bo_reference);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"bo_reference\": {{bo_reference}},\n    \"name\": \"Jose L. Robinson\",\n    \"contact_name\": \"John Doe\",\n    \"active\": false,\n    \"address_id\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_customer}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.contact_name)\r",
									"console.log(\"Adress_id = \" + pm.response.json().data.address_id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_customer}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_customer}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_customer}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.data.contact_name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.data.address_id)\r",
									"pm.environment.set('id_customer', pm.response.json().data.data.id)\r",
									"pm.environment.set('customer_code', pm.response.json().data.data.code)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"2628772687558769655XYZ\" + Math.floor((Math.random() * 500) + 1);\r",
									"const bo_reference = \"92879827UXYZWWSZZ\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"console.log(code);\r",
									"console.log(bo_reference);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"bo_reference\": {{bo_reference}},\n    \"name\": \"Jose L. Robinson\",\n    \"contact_name\": \"Roger J. Turnage\",\n    \"active\": false,\n    \"address_id\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"customers"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [addresses]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									"\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of adresses should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/addresses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"addresses"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_1).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_1).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_2).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_2).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.postal_code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.postal_code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"town not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.town).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"town not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.town).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"country not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.country).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"country not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.country).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Address_1 = \" + pm.response.json().data.data.address_1)\r",
									"console.log(\"Address_2 = \" + pm.response.json().data.data.address_2)\r",
									"console.log(\"Postal_code = \" + pm.response.json().data.data.postal_code)\r",
									"console.log(\"Town = \" + pm.response.json().data.data.town)\r",
									"console.log(\"Country = \" + pm.response.json().data.data.country)\r",
									"pm.environment.set('id_address', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address_1\": \"1 Route du SOLEIL\",\n    \"address_2\": \"Etage 1\",\n    \"postal_code\": \"75001\",\n    \"town\": \"Paris\",\n    \"country\": \"France\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/addresses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"addresses"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of addresses should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/addresses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"addresses"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_1).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_1).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_2).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_2).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.postal_code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.postal_code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"town not null\", function(){\r",
									"    pm.expect(pm.response.json().data.town).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"town not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.town).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"country not null\", function(){\r",
									"    pm.expect(pm.response.json().data.country).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"country not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.country).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Address_1 = \" + pm.response.json().data.address_1)\r",
									"console.log(\"Address_2 = \" + pm.response.json().data.address_2)\r",
									"console.log(\"Postal_code = \" + pm.response.json().data.postal_code)\r",
									"console.log(\"Town = \"  + pm.response.json().data.town)\r",
									"console.log(\"Country = \" + pm.response.json().data.country)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/addresses/:address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"addresses",
								":address"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "address",
									"value": "{{id_address}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_1).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_1).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_2).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_2).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.postal_code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.postal_code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"town not null\", function(){\r",
									"    pm.expect(pm.response.json().data.town).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"town not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.town).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"country not null\", function(){\r",
									"    pm.expect(pm.response.json().data.country).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"country not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.country).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Address_1 = \" + pm.response.json().data.address_1)\r",
									"console.log(\"Address_2 = \" + pm.response.json().data.address_2)\r",
									"console.log(\"Postal_code = \" + pm.response.json().data.postal_code)\r",
									"console.log(\"Town = \"  + pm.response.json().data.town)\r",
									"console.log(\"Country = \" + pm.response.json().data.country)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address_1\": \"1 Route de la LUNE\",\n    \"address_2\": \"rdc\",\n    \"postal_code\": \"75001\",\n    \"city\": \"Paris\",\n    \"country\": \"France\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/addresses/:address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"addresses",
								":address"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "address",
									"value": "{{id_address}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_1).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_1).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_2).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_2).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.postal_code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.postal_code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"town not null\", function(){\r",
									"    pm.expect(pm.response.json().data.town).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"town not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.town).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"country not null\", function(){\r",
									"    pm.expect(pm.response.json().data.country).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"country not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.country).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Address_1 = \" + pm.response.json().data.address_1)\r",
									"console.log(\"Address_2 = \" + pm.response.json().data.address_2)\r",
									"console.log(\"Postal_code = \" + pm.response.json().data.postal_code)\r",
									"console.log(\"Town = \"  + pm.response.json().data.town)\r",
									"console.log(\"Country = \" + pm.response.json().data.country)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/addresses/:address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"addresses",
								":address"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "address",
									"value": "{{id_address}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_1).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_1).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_2).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_2).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.postal_code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.postal_code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"town not null\", function(){\r",
									"    pm.expect(pm.response.json().data.town).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"town not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.town).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"country not null\", function(){\r",
									"    pm.expect(pm.response.json().data.country).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"country not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.country).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Address_1 = \" + pm.response.json().data.address_1)\r",
									"console.log(\"Address_2 = \" + pm.response.json().data.address_2)\r",
									"console.log(\"Postal_code = \" + pm.response.json().data.postal_code)\r",
									"console.log(\"Town = \"  + pm.response.json().data.town)\r",
									"console.log(\"Country = \" + pm.response.json().data.country)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address_1\": \"1 Rue de Marseille\",\n    \"address_2\": \"Etage 1\",\n    \"postal_code\": \"75000\",\n    \"town\": \"Epinay sur Seine\",\n    \"country\": \"France\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/addresses/:address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"addresses",
								":address"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "address",
									"value": "{{id_address}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_1).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_1).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_2).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_2).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.postal_code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.postal_code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"town not null\", function(){\r",
									"    pm.expect(pm.response.json().data.town).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"town not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.town).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"country not null\", function(){\r",
									"    pm.expect(pm.response.json().data.country).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"country not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.country).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Address_1 = \" + pm.response.json().data.address_1)\r",
									"console.log(\"Address_2 = \" + pm.response.json().data.address_2)\r",
									"console.log(\"Postal_code = \" + pm.response.json().data.postal_code)\r",
									"console.log(\"Town = \"  + pm.response.json().data.town)\r",
									"console.log(\"Country = \" + pm.response.json().data.country)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/addresses/:address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"addresses",
								":address"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "address",
									"value": "{{id_address}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/addresses/:address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"addresses",
								":address"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "address",
									"value": "{{id_address}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/addresses/:address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"addresses",
								":address"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "address",
									"value": "{{id_address}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_1).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_1 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_1).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_2).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"new address_2 not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_2).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.postal_code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"postal_code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.postal_code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"town not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.town).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"town not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.town).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"country not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.country).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"country not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.country).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Address_1 = \" + pm.response.json().data.data.address_1)\r",
									"console.log(\"Address_2 = \" + pm.response.json().data.data.address_2)\r",
									"console.log(\"Postal_code = \" + pm.response.json().data.data.postal_code)\r",
									"console.log(\"Town = \" + pm.response.json().data.data.town)\r",
									"console.log(\"Country = \" + pm.response.json().data.data.country)\r",
									"pm.environment.set('id_address', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address_1\": \"1 Route du SOLEIL\",\n    \"address_2\": \"Etage 1\",\n    \"postal_code\": \"75001\",\n    \"town\": \"Paris\",\n    \"country\": \"France\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/addresses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"addresses"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									"\r",
									")\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [services]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of services should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"services"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Bo_reference \" + pm.response.json().data.data.bo_reference)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.data.delivery_site)\r",
									"pm.environment.set('id_service', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code =\"UNK\" + Math.floor((Math.random() * 500) + 50);\r",
									"const customer_id = pm.environment.get(\"id_customer\");\r",
									"const bo_reference = \"UY666UII\" + Math.floor((Math.random() * 500) + 1);\r",
									"const id_address = pm.environment.get(\"id_address\");\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('customer_id', JSON.stringify(customer_id));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"pm.variables.set('id_address', JSON.stringify(id_address));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": {{code}},\n  \"bo_reference\": {{bo_reference}},\n  \"customer_id\": {{customer_id}},\n  \"name\": \"Tina R. Collier\",\n  \"contact_name\": \"Melvin V. Wild\",\n  \"address_id\": {{id_address}},\n  \"delivery_site\": \"Staten Island\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"services"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of services should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"services"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"customer_id = \" + pm.response.json().data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.delivery_site)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_service}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"customer_id = \" + pm.response.json().data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.delivery_site)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"92879827UXY\" +  Math.floor((Math.random() * 500) + 1);\r",
									"const bo_reference = \"UY666666899\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"console.log(code)\r",
									"console.log(bo_reference)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"bo_reference\": {{bo_reference}},\n    \"customer_id\": 1,\n    \"name\": \"Wilford K. Hawkins\",\n    \"contact_name\": \"Tim Cook\",\n    \"address_id\": 1,\n    \"delivery_site\": \"Nouveau siege de Roswell\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_service}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"customer_id = \" + pm.response.json().data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.delivery_site)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_service}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"customer_id = \" + pm.response.json().data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.delivery_site)\r",
									"pm.environment.set('service_code', pm.response.json().data.code)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"9211\" +  Math.floor((Math.random() * 500) + 1);\r",
									"const bo_reference = \"UY666666899\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"console.log(code)\r",
									"console.log(bo_reference)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"bo_reference\": {{bo_reference}},\n    \"customer_id\": 1,\n    \"name\": \"Wilford K. Hawkins\",\n    \"contact_name\": \"Catherine D. Sanders\",\n    \"address_id\": 1,\n    \"delivery_site\": \"S. de Roswell\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_service}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"customer_id = \" + pm.response.json().data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.delivery_site)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_service}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_service}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_service}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [listing]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of listes should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/listings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"listings"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)\r",
									"pm.environment.set('id_listing', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"INCONNU\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code))\r",
									"console.log(code);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"parent_id\": 6,\n    \"description\": \"On sait pas à quoi cela correspond\",\n    \"notion\": \"MorphToClass\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/listings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"listings"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of listes should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/listings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"listings"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \"  + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/listings/:listing",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"listings",
								":listing"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "listing",
									"value": "{{id_listing}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \"  + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"UNKNOWN\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code))\r",
									"console.log(code);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"parent_id\": 6,\n    \"description\": \"Aucune idéeeeeee\",\n    \"notion\": \"MorphToClass\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/listings/:listing",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"listings",
								":listing"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "listing",
									"value": "{{id_listing}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \"  + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/listings/:listing",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"listings",
								":listing"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "listing",
									"value": "{{id_listing}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \"  + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"UNK\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code))\r",
									"console.log(code);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"parent_id\": 6,\n    \"description\": \"Aucune idéeeeeees\",\n    \"notion\": \"MorphToClass\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/listings/:listing",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"listings",
								":listing"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "listing",
									"value": "{{id_listing}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \"  + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Description = \" + pm.response.json().data.data.description)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/listings/:listing",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"listings",
								":listing"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "listing",
									"value": "{{id_listing}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/listings/:listing",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"listings",
								":listing"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "listing",
									"value": "{{id_listing}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/listings/:listing",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"listings",
								":listing"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "listing",
									"value": "{{id_listing}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");\r",
									"pm.environment.unset(\"id_listing\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [views/beneficiaries]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(pm.response.json().data.token)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of beneficiaries should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/beneficiaries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"beneficiaries"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"123456\" + Math.floor((Math.random() * 500) + 1);\r",
									"const service_code = pm.environment.get('service_code');\r",
									"const email = \"garyschwartz\" + Math.floor((Math.random() * 500) + 1) + \"@up.coop\";\r",
									"const address_1 = Math.floor((Math.random() *200 ) + 1) + \" Route de Mars\" ;\r",
									"const address_2 = \"Etage \" + Math.floor((Math.random() * 40) + 1);\r",
									"pm.variables.set('service_code', JSON.stringify(service_code));\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"pm.variables.set('address_1', JSON.stringify(address_1))\r",
									"pm.variables.set('address_2', JSON.stringify(address_2))\r",
									"console.log(service_code)\r",
									"console.log(code)\r",
									"console.log(email)\r",
									"console.log(address_1)\r",
									"console.log(address_2)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.first_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.first_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.last_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.last_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"email not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.email).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"email not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.email).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"profile not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.profile).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"profile not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.profile).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.address_id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.service_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.service_id).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"first_name = \" + pm.response.json().data.data.first_name)\r",
									"console.log(\"last_name = \" + pm.response.json().data.data.last_name)\r",
									"console.log(\"email = \" + pm.response.json().data.data.email)\r",
									"console.log(\"profile = \" + pm.response.json().data.data.profile)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"address_id = \" + pm.response.json().data.data.address_id)\r",
									"console.log(\"service_id = \" + pm.response.json().data.data.service_id)\r",
									"pm.environment.set('id_vbenef', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : {{code}},\n    \"service_code\" : {{service_code}},\n    \"first_name\": \"Gary\",\n    \"last_name\": \"Schwartz\",\n    \"email\": {{email}},\n    \"address\": {\n        \"address_1\": {{address_1}},\n        \"address_2\": {{address_2}},\n        \"postal_code\": \"75000\",\n        \"town\": \"Paris\",\n        \"country\": \"Frnace\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/beneficiaries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"beneficiaries"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"pm.test(\r",
									"    \"Number of beneficiaries should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/beneficiaries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"beneficiaries"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contain Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain code\", function(){\r",
									"    pm.expect(pm.response.json().data.code).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain first_name\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain last_name\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain email\", function(){\r",
									"    pm.expect(pm.response.json().data.email).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain profile\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain active\", function(){\r",
									"    pm.expect(pm.response.json().data.active).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain adresse_id\", function(){\r",
									"    pm.expect(pm.response.json().data.adresse_id).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain service_id\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).not.eql(null);\r",
									"})\r",
									"\r",
									"console.log(pm.response.json().data)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_vbenef}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"email not null\", function(){\r",
									"    pm.expect(pm.response.json().data.email).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"email not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.email).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"profile not null\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"profile not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"first_name = \" + pm.response.json().data.first_name)\r",
									"console.log(\"last_name = \" + pm.response.json().data.last_name)\r",
									"console.log(\"email = \" + pm.response.json().data.email)\r",
									"console.log(\"profile = \" + pm.response.json().data.profile)\r",
									"console.log(\"code = \" + pm.response.json().data.code)\r",
									"console.log(\"address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"service_id = \" + pm.response.json().data.service_id)\r",
									"pm.environment.set('id_beneficiaire', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = \"janierl\" + Math.floor((Math.random() * 500) + 1) + \"@up.coop\";\r",
									"const address_1 = Math.floor((Math.random() *200 ) + 1) + \" Route de Mars\" ;\r",
									"const address_2 = \"Etage \" + Math.floor((Math.random() * 40) + 1);\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"pm.variables.set('address_1', JSON.stringify(address_1))\r",
									"pm.variables.set('address_2', JSON.stringify(address_2))\r",
									"console.log(email)\r",
									"console.log(address_1)\r",
									"console.log(address_2)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Janie\",\n    \"last_name\": \"R. Ling\",\n    \"email\": {{email}},\n    \"address_id\": 98,\n    \"address_1\": {{address_1}},\n    \"address_2\": {{address_2}},\n    \"postal_code\": \"75000\",\n    \"city\": \"Paris\",\n    \"country\": \"France\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_vbenef}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contain Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain code\", function(){\r",
									"    pm.expect(pm.response.json().data.code).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain first_name\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain last_name\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain email\", function(){\r",
									"    pm.expect(pm.response.json().data.email).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain profile\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain active\", function(){\r",
									"    pm.expect(pm.response.json().data.active).not.eql(null);\r",
									"})\r",
									"pm.test(\"Data contain adresse_id\", function(){\r",
									"    pm.expect(pm.response.json().data.adresse_id).not.eql(null);\r",
									"})\r",
									"pm.test(\"Data contain service_id\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).not.eql(null);\r",
									"})\r",
									"\r",
									"console.log(pm.response.json().data)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_vbenef}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"first_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"last_name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"email not null\", function(){\r",
									"    pm.expect(pm.response.json().data.email).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"email not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.email).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"profile not null\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"profile not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"address_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"service_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"first_name = \" + pm.response.json().data.first_name)\r",
									"console.log(\"last_name = \" + pm.response.json().data.last_name)\r",
									"console.log(\"email = \" + pm.response.json().data.email)\r",
									"console.log(\"profile = \" + pm.response.json().data.profile)\r",
									"console.log(\"code = \" + pm.response.json().data.code)\r",
									"console.log(\"address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"service_id = \" + pm.response.json().data.service_id)\r",
									"pm.environment.set('id_beneficiaire', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = \"jerling\" + Math.floor((Math.random() * 500) + 1) + \"@up.coop\";\r",
									"const address_1 = Math.floor((Math.random() *200 ) + 1) + \" Route de Mars\" ;\r",
									"const address_2 = \"Etage \" + Math.floor((Math.random() * 40) + 1);\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"pm.variables.set('address_1', JSON.stringify(address_1))\r",
									"pm.variables.set('address_2', JSON.stringify(address_2))\r",
									"console.log(email)\r",
									"console.log(address_1)\r",
									"console.log(address_2)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Janie\",\n    \"last_name\": \"R. Ling\",\n    \"email\": {{email}},\n    \"address_id\": 98,\n    \"address_1\": {{address_1}},\n    \"address_2\": {{address_2}},\n    \"postal_code\": \"75000\",\n    \"city\": \"Paris\",\n    \"country\": \"France\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_vbenef}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contain Data\", function(){\r",
									"    pm.expect(pm.response.json()).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain code\", function(){\r",
									"    pm.expect(pm.response.json().data.code).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain first_name\", function(){\r",
									"    pm.expect(pm.response.json().data.first_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain last_name\", function(){\r",
									"    pm.expect(pm.response.json().data.last_name).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain email\", function(){\r",
									"    pm.expect(pm.response.json().data.email).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain profile\", function(){\r",
									"    pm.expect(pm.response.json().data.profile).not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Data contain active\", function(){\r",
									"    pm.expect(pm.response.json().data.active).not.eql(null);\r",
									"})\r",
									"pm.test(\"Data contain adresse_id\", function(){\r",
									"    pm.expect(pm.response.json().data.adresse_id).not.eql(null);\r",
									"})\r",
									"pm.test(\"Data contain service_id\", function(){\r",
									"    pm.expect(pm.response.json().data.service_id).not.eql(null);\r",
									"})\r",
									"\r",
									"console.log(pm.response.json().data)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_vbenef}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_vbenef}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(pm.response.json().data)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/beneficiaries/:beneficiary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"beneficiaries",
								":beneficiary"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "beneficiary",
									"value": "{{id_vbenef}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"pm.environment.unset(\"id_vbenef\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [profiles]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"token\");\r",
									"const t = parseInt(pm.environment.get('temps'))\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of profiles should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Total = \" + pm.response.json().data.total)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/profiles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"profiles"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"code not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"level not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"level not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"active not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"active not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true);\r",
									"})\r",
									"\r",
									"pm.environment.set('id', pm.response.json().data.data.id)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"level = \" + pm.response.json().data.data.level)\r",
									"console.log(\"active = \" + pm.response.json().data.data.active)\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"pm.environment.set('id_profile', pm.response.json().data.data.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"12XEZ\" + Math.floor((Math.random() * 500) + 1);\r",
									"const name = \"name\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"console.log(code)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"code\": {{code}},\r\n      \"name\": {{name}},\r\n      \"description\": \"Description : ......\",\r\n      \"level\": 1,\r\n      \"is_user\": true,\r\n      \"active\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/profiles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"profiles"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of profiles should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Total = \" + pm.response.json().data.total)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/profiles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"profiles"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"code not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"level not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"level not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"active not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"active not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true);\r",
									"})\r",
									"\r",
									"pm.environment.set('id', pm.response.json().data.data.id)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"level = \" + pm.response.json().data.data.level)\r",
									"console.log(\"active = \" + pm.response.json().data.data.active)\r",
									"console.log(\"success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/profiles/:profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"profiles",
								":profile"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "profile",
									"value": "{{id_profile}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"12X\" + Math.floor((Math.random() * 500) + 1);\r",
									"const name = \"Name\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"console.log(code)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"code not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"level not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).to.not.be.null\r",
									"});\r",
									"pm.test(\"level not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"active not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"active not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true);\r",
									"})\r",
									"\r",
									"pm.environment.set('id', pm.response.json().data.data.id)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"level = \" + pm.response.json().data.data.level)\r",
									"console.log(\"active = \" + pm.response.json().data.data.active)\r",
									"console.log(\"success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"code\": {{code}},\r\n      \"name\": {{name}},\r\n      \"description\": \"Description : ......\",\r\n      \"level\": 1,\r\n      \"is_user\": true,\r\n      \"active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/profiles/:profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"profiles",
								":profile"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "profile",
									"value": "{{id_profile}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"code not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"level not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"level not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"active not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"active not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true);\r",
									"})\r",
									"\r",
									"pm.environment.set('id', pm.response.json().data.data.id)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"level = \" + pm.response.json().data.data.level)\r",
									"console.log(\"active = \" + pm.response.json().data.data.active)\r",
									"console.log(\"success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/profiles/:profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"profiles",
								":profile"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "profile",
									"value": "{{id_profile}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"code not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"level not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"level not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"active not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"active not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true);\r",
									"})\r",
									"\r",
									"pm.environment.set('id', pm.response.json().data.data.id)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"level = \" + pm.response.json().data.data.level)\r",
									"console.log(\"active = \" + pm.response.json().data.data.active)\r",
									"console.log(\"success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"12XBR\" + Math.floor((Math.random() * 500) + 1);\r",
									"const name = \"Nom\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"console.log(code)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"code\": {{code}},\r\n      \"name\": {{name}},\r\n      \"description\": \"Description : ......\",\r\n      \"level\": 1,\r\n      \"is_user\": true,\r\n      \"active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/profiles/:profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"profiles",
								":profile"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "profile",
									"value": "{{id_profile}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Data field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('data')\r",
									"});\r",
									"\r",
									"pm.test(\"Name not null?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"Name not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"code not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"code not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"level not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"level not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.level).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"active not null ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).to.not.be.null\r",
									"});\r",
									"\r",
									"pm.test(\"active not equal to undefined ?\", function(){\r",
									"    pm.expect(pm.response.json().data.data.active).is.not.undefined\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true);\r",
									"})\r",
									"\r",
									"pm.environment.set('id', pm.response.json().data.data.id)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"level = \" + pm.response.json().data.data.level)\r",
									"console.log(\"active = \" + pm.response.json().data.data.active)\r",
									"console.log(\"success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/profiles/:profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"profiles",
								":profile"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "profile",
									"value": "{{id_profile}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/profiles/:profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"profiles",
								":profile"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "profile",
									"value": "{{id_profile}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/profiles/:profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"profiles",
								":profile"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "profile",
									"value": "{{id_profile}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [imports views/beneficiaries]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"token\");\r",
									"const t = parseInt(pm.environment.get('temps'))\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Bo_reference \" + pm.response.json().data.data.bo_reference)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.data.delivery_site)\r",
									"pm.environment.set('id_service', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bo_reference = \"UY666666899805077\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"1234567890\",\n    \"bo_reference\": {{bo_reference}},\n    \"customer_id\": 60,\n    \"name\": \"Wilford K. Hawkins\",\n    \"contact_name\": \"Catherine D. Sanders\",\n    \"address_id\": 20,\n    \"delivery_site\": \"Siège de Roswell\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"services"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ImportTask a collection of beneficiaries to the storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"comment test ?\",\r",
									" () => pm.expect(pm.response.json().data.data.comment).to.eql(\"Importation des bénéficiaires\")\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Status code test ?\",\r",
									" () => pm.expect(pm.response.json().data.data.status.code).to.eql(\"IMPORT_QUEUED\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.customer_id)\r",
									"console.log(\"Comment = \"+ pm.response.json().data.data.comment)\r",
									"console.log(\"Status code = \"+ pm.response.json().data.data.status.code)\r",
									"pm.environment.set('id_import', pm.response.json().data.data.id)\r",
									"setTimeout(function(){}, 85000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/user/OneDrive/Bureau/up/logiweb_v2/resources/doc/tests/postman/new_benef.csv"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/beneficiaries/import",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"beneficiaries",
								"import"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of beneficiares should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process",
								"tasks"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "2",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"process_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.process.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"process_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.process.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"status id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"status id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"available_at not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.available_at).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"available_at not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.available_at).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"comment not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.comment).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"comment not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.comment).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"status code\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.code).to.eql(\"IMPORT_DONE\")\r",
									"})\r",
									"\r",
									"pm.test(\"status description\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.description).to.eql(\"Analyse des données terminée avec succès\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"var start = new Date(pm.response.json().data.data.started_at);\r",
									"var end = new Date(pm.response.json().data.data.ended_at);\r",
									"var time_elapsed = end.getMilliseconds() - start.getMilliseconds();\r",
									"pm.test(\"Importation time elapsed\", function(){\r",
									"    pm.expect(time_elapsed).to.be.below(2)\r",
									"})\r",
									"\r",
									"console.log(start)\r",
									"console.log(end)\r",
									"console.log(time_elapsed)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process/tasks/:task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process",
								"tasks",
								":task"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "2",
									"description": "(Required) "
								},
								{
									"key": "task",
									"value": "{{id_import}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\"Message test\", function(){\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Validation de l'import encours...\")\r",
									"})\r",
									"setTimeout(function(){}, 85000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process/tasks/:task/validate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process",
								"tasks",
								":task",
								"validate"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "2",
									"description": "(Required) "
								},
								{
									"key": "task",
									"value": "{{id_import}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"process_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.process.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"process_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.process.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"status id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"status id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"available_at not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.available_at).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"available_at not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.available_at).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"comment not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.comment).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"comment not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.comment).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"status code\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.code).to.eql(\"IMPORT_VALIDATION_DONE\")\r",
									"})\r",
									"\r",
									"pm.test(\"status description\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.description).to.eql(\"Importation terminée avec succès\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"var start = new Date(pm.response.json().data.data.started_at);\r",
									"var end = new Date(pm.response.json().data.data.ended_at);\r",
									"var time_elapsed = end.getMilliseconds() - start.getMilliseconds();\r",
									"pm.test(\"Importation time elapsed\", function(){\r",
									"    pm.expect(time_elapsed).to.be.below(2)\r",
									"})\r",
									"\r",
									"console.log(start)\r",
									"console.log(end)\r",
									"console.log(time_elapsed)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process/tasks/:task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process",
								"tasks",
								":task"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "2",
									"description": "(Required) "
								},
								{
									"key": "task",
									"value": "{{id_import}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"process_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.process.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"process_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.process.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"status id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"status id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"available_at not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.available_at).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"available_at not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.available_at).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"comment not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.comment).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"comment not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.comment).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"status code\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.code).to.eql(\"IMPORT_VALIDATION_DONE\")\r",
									"})\r",
									"\r",
									"pm.test(\"status description\", function(){\r",
									"    pm.expect(pm.response.json().data.data.status.description).to.eql(\"Importation terminée avec succès\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"var start = new Date(pm.response.json().data.data.started_at);\r",
									"var end = new Date(pm.response.json().data.data.ended_at);\r",
									"var time_elapsed = end.getMilliseconds() - start.getMilliseconds();\r",
									"pm.test(\"Importation time elapsed\", function(){\r",
									"    pm.expect(time_elapsed).to.be.below(2)\r",
									"})\r",
									"\r",
									"console.log(start)\r",
									"console.log(end)\r",
									"console.log(time_elapsed)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/processes/:process/tasks/:task/details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"processes",
								":process",
								"tasks",
								":task",
								"details"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								},
								{
									"key": "process",
									"value": "2",
									"description": "(Required) "
								},
								{
									"key": "task",
									"value": "{{id_import}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "orange",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [views customers]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"token\");\r",
									"const t = parseInt(pm.environment.get('temps'))\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of customers should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"customers"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"XYZ\" + Math.floor((Math.random() * 500) + 1);\r",
									"const bo_reference = \"7UII\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"console.log(code);\r",
									"console.log(bo_reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.data.contact_name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.data.address_id)\r",
									"pm.environment.set('id_cust', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"bo_reference\": {{bo_reference}},\n    \"name\": \"John Doe\",\n    \"contact_name\": \"John Doe\",\n    \"active\": false,\n    \"address_id\": \"1\",\n    \"address\": [\n        {\n            \"address_1\": \"Etage 1\",\n            \"address_2\": \"Etage 1\",\n            \"postal_code\": \"75000\",\n            \"city\": \"Paris\",\n            \"country\": \"France\"\n        },\n        {\n            \"address_1\": \"Etage 1\",\n            \"address_2\": \"Etage 1\",\n            \"postal_code\": \"75000\",\n            \"city\": \"Paris\",\n            \"country\": \"France\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"customers"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of customers should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"customers"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.contact_name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"pm.environment.set('id_cust', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_cust}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"ANC\" + Math.floor((Math.random() * 500) + 1);\r",
									"const bo_reference = \"7UIIXY\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"console.log(code);\r",
									"console.log(bo_reference);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.contact_name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"pm.environment.set('id_cust', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": {{code}},\n  \"bo_reference\": {{bo_reference}},\n  \"name\": \"John Doe\",\n  \"contact_name\": \"John Doe\",\n  \"active\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_cust}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.contact_name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"pm.environment.set('id_cust', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_cust}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.contact_name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"pm.environment.set('id_cust', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": {{code}},\n  \"bo_reference\": {{bo_reference}},\n  \"name\": \"John Doe\",\n  \"contact_name\": \"John Doe\",\n  \"active\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_cust}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code added ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference = \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Contact_name = \" + pm.response.json().data.contact_name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"pm.environment.set('id_cust', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_cust}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_cust}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/customers/:customer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"customers",
								":customer"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "customer",
									"value": "{{id_cust}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [formats]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"token\");\r",
									"const t = parseInt(pm.environment.get('temps'))\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display  format of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of formats should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Total = \"+ pm.response.json().data.total)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/formats",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"formats"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"description not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"description not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"config_file = \" + pm.response.json().data.data.config_file)\r",
									"pm.environment.set('id_format', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"ABCD\" + Math.floor((Math.random() * 500) + 1);\r",
									"const nom = \"Nom\" + Math.floor((Math.random() * 500) + 1);\r",
									"const file = \"file\" + Math.floor((Math.random() * 500) + 1) + \".json\";\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('nom', JSON.stringify(nom));\r",
									"pm.variables.set('file', JSON.stringify(file));\r",
									"console.log(code);\r",
									"console.log(nom);\r",
									"console.log(file);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"description\": \"Description\",\n    \"name\": {{nom}},\n    \"config_file\": {{file}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/formats",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"formats"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display  format of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of formats should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Total = \"+ pm.response.json().data.total)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/formats",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"formats"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.be.true\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"description not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"description not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"config_file = \" + pm.response.json().data.data.config_file)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/formats/:format",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"formats",
								":format"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "format",
									"value": "{{id_format}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"ABCDE\" + Math.floor((Math.random() * 500) + 1);\r",
									"const nom = \"Name\" + Math.floor((Math.random() * 500) + 1);\r",
									"const file = \"file_\" + Math.floor((Math.random() * 500) + 1) + \".json\";\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('nom', JSON.stringify(nom));\r",
									"pm.variables.set('file', JSON.stringify(file));\r",
									"console.log(code);\r",
									"console.log(nom);\r",
									"console.log(file);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.be.true\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"description not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"description not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"config_file = \" + pm.response.json().data.data.config_file)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"description\": \"Description\",\n    \"name\": {{nom}},\n    \"config_file\": {{file}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/formats/:format",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"formats",
								":format"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "format",
									"value": "{{id_format}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.be.true\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"description not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"description not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"config_file = \" + pm.response.json().data.data.config_file)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/formats/:format",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"formats",
								":format"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "format",
									"value": "{{id_format}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"AB12\" + Math.floor((Math.random() * 500) + 1);\r",
									"const nom = \"name\" + Math.floor((Math.random() * 500) + 1);\r",
									"const file = \"file-\" + Math.floor((Math.random() * 500) + 1) + \".json\";\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('nom', JSON.stringify(nom));\r",
									"pm.variables.set('file', JSON.stringify(file));\r",
									"console.log(code);\r",
									"console.log(nom);\r",
									"console.log(file);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.be.true\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"description not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"description not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"config_file = \" + pm.response.json().data.data.config_file)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"description\": \"Description\",\n    \"name\": {{nom}},\n    \"config_file\": {{file}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/formats/:format",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"formats",
								":format"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "format",
									"value": "{{id_format}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.be.true\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"name not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"name not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"code not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"code not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"description not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"description not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"config_file not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.config_file).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"config_file = \" + pm.response.json().data.data.config_file)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/formats/:format",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"formats",
								":format"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "format",
									"value": "{{id_format}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.be.true\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/formats/:format",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"formats",
								":format"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "format",
									"value": "{{id_format}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/formats/:format",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"formats",
								":format"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "format",
									"value": "{{id_format}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [orders]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.environment.unset(\"token\");\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of orders should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.tracking_number).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.tracking_number).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.status).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.status).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"Reference = \" + pm.response.json().data.data.reference)\r",
									"console.log(\"Type = \"  + pm.response.json().data.data.type)\r",
									"console.log(\"Tracking_number \" + pm.response.json().data.data.tracking_number)\r",
									"console.log(\"Status = \" + pm.response.json().data.data.status)\r",
									"console.log(\"Customer_id = \" + pm.response.json().data.data.customer_id)\r",
									"pm.environment.set('id_order', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const reference = \"92879827UIIXYZKUJ\" + Math.floor((Math.random() * 500) + 1);\r",
									"const tracking_number = \"ORDER\" + Math.floor((Math.random() * 500) + 1);\r",
									"const customer_code = pm.environment.get('customer_code');\r",
									"pm.variables.set('customer_code', JSON.stringify(customer_code));\r",
									"pm.variables.set('reference', JSON.stringify(reference));\r",
									"pm.variables.set('tracking_number', JSON.stringify(tracking_number))\r",
									"console.log(reference);\r",
									"console.log(tracking_number);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reference\": {{reference}},\n    \"type\": \"types\",\n    \"tracking_number\": {{tracking_number}},\n    \"status\": \"utamet\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of orders should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not null ?\",\r",
									" () => pm.expect(pm.response.json().data.tracking_number).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.tracking_number).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not null ?\",\r",
									" () => pm.expect(pm.response.json().data.status).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.status).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Reference = \" + pm.response.json().data.reference)\r",
									"console.log(\"Type = \" + pm.response.json().data.type)\r",
									"console.log(\"Tracking_number = \" + pm.response.json().data.tracking_number)\r",
									"console.log(\"Status = \" + pm.response.json().data.status)\r",
									"console.log(\"Customer_id = \" + pm.response.json().data.customer_id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not null ?\",\r",
									" () => pm.expect(pm.response.json().data.tracking_number).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.tracking_number).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not null ?\",\r",
									" () => pm.expect(pm.response.json().data.status).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.status).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Reference = \" + pm.response.json().data.reference)\r",
									"console.log(\"Type = \" + pm.response.json().data.type)\r",
									"console.log(\"Tracking_number = \" + pm.response.json().data.tracking_number)\r",
									"console.log(\"Status = \" + pm.response.json().data.status)\r",
									"console.log(\"Customer_id = \" + pm.response.json().data.customer_id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const reference = \"92879827UIXYZ\" + Math.floor((Math.random() * 500) + 1);\r",
									"const tracking_number = \"NEWORDER\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('reference', JSON.stringify(reference));\r",
									"pm.variables.set('tracking_number', JSON.stringify(tracking_number))\r",
									"console.log(reference);\r",
									"console.log(tracking_number);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reference\": {{reference}},\n    \"type\": \"Types\",\n    \"tracking_number\": {{tracking_number}},\n    \"status\": \"utamet\",\n    \"customer_id\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not null ?\",\r",
									" () => pm.expect(pm.response.json().data.tracking_number).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.tracking_number).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not null ?\",\r",
									" () => pm.expect(pm.response.json().data.status).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.status).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Reference = \" + pm.response.json().data.reference)\r",
									"console.log(\"Type = \" + pm.response.json().data.type)\r",
									"console.log(\"Tracking_number = \" + pm.response.json().data.tracking_number)\r",
									"console.log(\"Status = \" + pm.response.json().data.status)\r",
									"console.log(\"Customer_id = \" + pm.response.json().data.customer_id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not null ?\",\r",
									" () => pm.expect(pm.response.json().data.tracking_number).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.tracking_number).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not null ?\",\r",
									" () => pm.expect(pm.response.json().data.status).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.status).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Reference = \" + pm.response.json().data.reference)\r",
									"console.log(\"Type = \" + pm.response.json().data.type)\r",
									"console.log(\"Tracking_number = \" + pm.response.json().data.tracking_number)\r",
									"console.log(\"Status = \" + pm.response.json().data.status)\r",
									"console.log(\"Customer_id = \" + pm.response.json().data.customer_id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const reference = \"92879827UIIXXXXXXXXXX\" + Math.floor((Math.random() * 500) + 1);\r",
									"const tracking_number = \"MAJORDER\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('reference', JSON.stringify(reference));\r",
									"pm.variables.set('tracking_number', JSON.stringify(tracking_number))\r",
									"console.log(reference);\r",
									"console.log(tracking_number);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reference\": {{reference}},\n    \"type\": \"Types\",\n    \"tracking_number\": {{tracking_number}},\n    \"status\": \"utaamet\",\n    \"customer_id\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){  \r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"reference not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"type not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not null ?\",\r",
									" () => pm.expect(pm.response.json().data.tracking_number).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"tracking_number not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.tracking_number).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not null ?\",\r",
									" () => pm.expect(pm.response.json().data.status).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"status not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.status).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.id)\r",
									"console.log(\"Reference = \" + pm.response.json().data.reference)\r",
									"console.log(\"Type = \" + pm.response.json().data.type)\r",
									"console.log(\"Tracking_number = \" + pm.response.json().data.tracking_number)\r",
									"console.log(\"Status = \" + pm.response.json().data.status)\r",
									"console.log(\"Customer_id = \" + pm.response.json().data.customer_id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [orders/detail]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"token\");\r",
									"const t = parseInt(pm.environment.get('temps'))\r",
									"console.log(t)\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(pm.response.json().data.token)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test (\"Result contains new Data\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property(\"data\")\r",
									"})\r",
									"\r",
									"pm.test(\"id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"quantity not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.quantity).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"quantity not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.quantity).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"delivery_type not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.delivery_type).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"delivery_type not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.delivery_type).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"order_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.order_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"order_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.order_id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"product_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.product_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"product_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.product_id).is.not.undefined\r",
									"})\r",
									"\r",
									"pm.test(\"beneficiary_id not null\", function(){\r",
									"    pm.expect(pm.response.json().data.data.beneficiary_id).to.not.be.null\r",
									"})\r",
									"\r",
									"pm.test(\"beneficiary_id not undefined\", function(){\r",
									"    pm.expect(pm.response.json().data.data.beneficiary_id).is.not.undefined\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"quantity = \" + pm.response.json().data.data.quantity)\r",
									"console.log(\"delivery_type = \" + pm.response.json().data.data.delivery_type)\r",
									"console.log(\"order_id = \" + pm.response.json().data.data.order_id)\r",
									"console.log(\"product_id = \" + pm.response.json().data.data.product_id)\r",
									"console.log(\"beneficiary_id = \" + pm.response.json().data.data.beneficiary_id)\r",
									"pm.environment.set('id_details', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 2,\n    \"delivery_type\": \"DeliveryType\",\n    \"order_id\": 23,\n    \"product_id\": 1,\n    \"beneficiary_id\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order/details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order",
								"details"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate the current order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Order validate successfully ? \", () => pm.expect(pm.response.json().data.message).to.be.eql(\"Order validated successfully\")\r",
									")\r",
									"\r",
									"console.log(pm.response.json().success)\r",
									"console.log(pm.response.json().data.message)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order/validate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order",
								"validate"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Data no empty\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order/details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order",
								"details"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order/details/:detail",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order",
								"details",
								":detail"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								},
								{
									"key": "detail",
									"value": "{{id_details}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reference\": \"92879827UII\",\n    \"type\": \"Type\",\n    \"tracking_number\": \"JohnDoe\",\n    \"status\": \"ut amet\",\n    \"customer_id\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order/details/:detail",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order",
								"details",
								":detail"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								},
								{
									"key": "detail",
									"value": "{{id_details}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order/details/:detail",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order",
								"details",
								":detail"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								},
								{
									"key": "detail",
									"value": "{{id_details}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 1,\n    \"delivery_type\": \"DeliveryType\",\n    \"order_id\": 1,\n    \"product_id\": 1,\n    \"beneficiary_id\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order/details/:detail",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order",
								"details",
								":detail"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								},
								{
									"key": "detail",
									"value": "{{id_details}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order/details/:detail",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order",
								"details",
								":detail"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								},
								{
									"key": "detail",
									"value": "{{id_details}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order/details/:detail",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order",
								"details",
								":detail"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								},
								{
									"key": "detail",
									"value": "{{id_details}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order/details/:detail",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order",
								"details",
								":detail"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								},
								{
									"key": "detail",
									"value": "{{id_details}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/orders/:order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"orders",
								":order"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "order",
									"value": "{{id_order}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"pm.environment.unset(\"token\");\r",
									"pm.environment.unset(\"id_order\");\r",
									"pm.environment.unset(\"id_details\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [views services]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"token\");\r",
									"const t = parseInt(pm.environment.get('temps'))\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of services should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"services"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code =\"UNK\" + Math.floor((Math.random() * 500) + 50);\r",
									"const customer_id = pm.environment.get(\"id_customer\");\r",
									"const bo_reference = \"UY666UII\" + Math.floor((Math.random() * 500) + 1);\r",
									"const id_address = pm.environment.get(\"id_address\");\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('customer_id', JSON.stringify(customer_id));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"pm.variables.set('id_address', JSON.stringify(id_address));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"Bo_reference \" + pm.response.json().data.data.bo_reference)\r",
									"console.log(\"Id = \" + pm.response.json().data.data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.data.delivery_site)\r",
									"pm.environment.set('id_serv', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"bo_reference\": {{bo_reference}},\n    \"customer_id\": {{customer_id}},\n    \"name\": \"Tina R. Collier\",\n    \"contact_name\": \"Melvin V. Wild\",\n    \"address_id\": {{id_address}},\n    \"delivery_site\" : \"Staten Island\",\n    \"address\": [\n        {\n            \"address_1\": \"Etage 1\",\n            \"address_2\": \"Etage 1\",\n            \"postal_code\": \"75000\",\n            \"city\": \"Paris\",\n            \"country\": \"Frnace\"\n        },\n        {\n            \"address_1\": \"Etage 1\",\n            \"address_2\": \"Etage 1\",\n            \"postal_code\": \"75000\",\n            \"city\": \"Paris\",\n            \"country\": \"France\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"services"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of services should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.data.length).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/services",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"services"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Id = \" + pm.response.json().data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.delivery_site)\r",
									"pm.environment.set('id_service', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_serv}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Id = \" + pm.response.json().data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.delivery_site)\r",
									"pm.environment.set('id_service', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code =\"UNKXZ\" + Math.floor((Math.random() * 500) + 50);\r",
									"const customer_id = pm.environment.get(\"id_customer\");\r",
									"const bo_reference = \"UY666UIXYYI\" + Math.floor((Math.random() * 500) + 1);\r",
									"const id_address = pm.environment.get(\"id_address\");\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('customer_id', JSON.stringify(customer_id));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"pm.variables.set('id_address', JSON.stringify(id_address));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"bo_reference\": {{bo_reference}},\n    \"customer_id\": {{customer_id}},\n    \"name\": \"Tina R. Collier\",\n    \"contact_name\": \"Melvin V. Wild\",\n    \"address_id\": {{id_address}},\n    \"delivery_site\" : \"Staten Island\",\n    \"address\": [\n        {\n            \"address_1\": \"Etage 1\",\n            \"address_2\": \"Etage 1\",\n            \"postal_code\": \"75000\",\n            \"city\": \"Paris\",\n            \"country\": \"Frnace\"\n        },\n        {\n            \"address_1\": \"Etage 1\",\n            \"address_2\": \"Etage 1\",\n            \"postal_code\": \"75000\",\n            \"city\": \"Paris\",\n            \"country\": \"France\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_serv}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Id = \" + pm.response.json().data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.delivery_site)\r",
									"pm.environment.set('id_service', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_serv}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code =\"UNKXZWWW\" + Math.floor((Math.random() * 500) + 50);\r",
									"const customer_id = pm.environment.get(\"id_customer\");\r",
									"const bo_reference = \"UY666UIXYYIZ\" + Math.floor((Math.random() * 500) + 1);\r",
									"const id_address = pm.environment.get(\"id_address\");\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('customer_id', JSON.stringify(customer_id));\r",
									"pm.variables.set('bo_reference', JSON.stringify(bo_reference));\r",
									"pm.variables.set('id_address', JSON.stringify(id_address));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Id = \" + pm.response.json().data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.delivery_site)\r",
									"pm.environment.set('id_serv', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"bo_reference\": {{bo_reference}},\n    \"customer_id\": {{customer_id}},\n    \"name\": \"Tina R. Collier\",\n    \"contact_name\": \"Melvin V. Wild\",\n    \"address_id\": {{id_address}},\n    \"delivery_site\" : \"Staten Island\",\n    \"address\": [\n        {\n            \"address_1\": \"Etage 1\",\n            \"address_2\": \"Etage 1\",\n            \"postal_code\": \"75000\",\n            \"city\": \"Paris\",\n            \"country\": \"Frnace\"\n        },\n        {\n            \"address_1\": \"Etage 1\",\n            \"address_2\": \"Etage 1\",\n            \"postal_code\": \"75000\",\n            \"city\": \"Paris\",\n            \"country\": \"France\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_serv}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"Code not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not null ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"bo_reference not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.bo_reference).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"customer_id is not equal to undefined?\",\r",
									" () => pm.expect(pm.response.json().data.customer_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"contact_name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.contact_name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"address_id is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.address_id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site not null ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"delivery_site is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.delivery_site).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"console.log(\"Code = \" + pm.response.json().data.code)\r",
									"console.log(\"Bo_reference \" + pm.response.json().data.bo_reference)\r",
									"console.log(\"Id = \" + pm.response.json().data.customer_id)\r",
									"console.log(\"Name = \" + pm.response.json().data.name)\r",
									"console.log(\"Address_id = \" + pm.response.json().data.address_id)\r",
									"console.log(\"Delivery_site = \" + pm.response.json().data.delivery_site)\r",
									"pm.environment.set('id_service', pm.response.json().data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_serv}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_serv}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 404)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/views/services/:service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"views",
								"services",
								":service"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "service",
									"value": "{{id_serv}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [calendars]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"token\");\r",
									"const t = parseInt(pm.environment.get('temps'))\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display  calendar of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of calendars should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Total = \" + pm.response.json().data.total)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/calendars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"calendars"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"12ABC\" + Math.floor((Math.random() * 500) + 1);\r",
									"const name = \"CALENDAR 2021 A\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"console.log(code);\r",
									"console.log(name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"period_type = \" + pm.response.json().data.data.period_type)\r",
									"pm.environment.set('id_calendar', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": {{code}},\r\n  \"name\": {{name}},\r\n  \"period_type\": \"weeks\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/calendars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"calendars"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display  calendar of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of calendars should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Total = \" + pm.response.json().data.total)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/calendars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"calendars"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"period_type = \" + pm.response.json().data.data.period_type)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/calendars/:calendar",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"calendars",
								":calendar"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "calendar",
									"value": "{{id_calendar}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"period_type = \" + pm.response.json().data.data.period_type)\r",
									"pm.environment.set('id_calendar', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"12ABC4\" + Math.floor((Math.random() * 500) + 1);\r",
									"const name = \"CALENDAR 2021 B\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"console.log(code);\r",
									"console.log(name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": {{code}},\r\n  \"name\": {{name}},\r\n  \"period_type\": \"days\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/calendars/:calendar",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"calendars",
								":calendar"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "calendar",
									"value": "{{id_calendar}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"period_type = \" + pm.response.json().data.data.period_type)\r",
									"pm.environment.set('id_calendar', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/calendars/:calendar",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"calendars",
								":calendar"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "calendar",
									"value": "{{id_calendar}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"12ABC5\" + Math.floor((Math.random() * 500) + 1);\r",
									"const name = \"CALENDAR 2021 C\" + Math.floor((Math.random() * 500) + 1);\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"console.log(code);\r",
									"console.log(name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"period_type = \" + pm.response.json().data.data.period_type)\r",
									"pm.environment.set('id_calendar', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": {{code}},\r\n  \"name\": {{name}},\r\n  \"period_type\": \"years\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/calendars/:calendar",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"calendars",
								":calendar"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "calendar",
									"value": "{{id_calendar}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"period_type is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.period_type).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"period_type = \" + pm.response.json().data.data.period_type)\r",
									"pm.environment.set('id_calendar', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/calendars/:calendar",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"calendars",
								":calendar"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "calendar",
									"value": "{{id_calendar}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/calendars/:calendar",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"calendars",
								":calendar"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "calendar",
									"value": "{{id_calendar}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/calendars/:calendar",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"calendars",
								":calendar"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "calendar",
									"value": "{{id_calendar}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [archives]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"token\");\r",
									"const t = parseInt(pm.environment.get('temps'))\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const motdepasse = pm.environment.get('password')\r",
									"const email = pm.environment.get('email_connect')\r",
									"pm.variables.set('password', JSON.stringify(motdepasse));\r",
									"pm.variables.set('email', JSON.stringify(email));\r",
									"console.log(email)\r",
									"console.log(motdepasse)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/archives",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"archives"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Archive orders table",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/archives",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"archives"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/archives",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"archives"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [menus]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"token\");\r",
									"const t = parseInt(pm.environment.get('temps'))\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"john.doe@up.coop\",\n    \"password\": \"up.coop\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of menus should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Total = \" + pm.response.json().data.total)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/menus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"menus"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const name = \"HOME \" + Math.floor((Math.random() * 500) + 1);\r",
									"const code = \"azerty\" + Math.floor((Math.random() * 500) + 1);\r",
									"const title = \"HomePage\" + Math.floor((Math.random() *500) + 1);\r",
									"const profile_id = pm.environment.get(\"id_profile\");\r",
									"pm.variables.set('id_profile', JSON.stringify(profile_id));\r",
									"pm.variables.set(\"title\", JSON.stringify(title));\r",
									"pm.variables.set(\"code\", JSON.stringify(code));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"name\": {{name}},\n    \"title\": {{title}},\n    \"sequence\": \"1\",\n    \"profile_id\" : {{id_profile}},\n    \"active\": false,\n    \"view_id\" : \"1\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/menus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"menus"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display a listing of the resource.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/menus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"menus"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/menus/:menu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"menus",
								":menu"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "menu",
									"value": "do nostrud",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"2456-MMM-88\",\n    \"name\": \"Home\",\n    \"title\": \"Home Page\",\n    \"sequence\": -63099632,\n    \"active\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/menus/:menu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"menus",
								":menu"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "menu",
									"value": "do nostrud",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/menus/:menu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"menus",
								":menu"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "menu",
									"value": "do nostrud",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"2456-MMM-88\",\n    \"name\": \"Home\",\n    \"title\": \"Home Page\",\n    \"sequence\": -63099632,\n    \"active\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/menus/:menu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"menus",
								":menu"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "menu",
									"value": "do nostrud",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/menus/:menu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"menus",
								":menu"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "menu",
									"value": "do nostrud",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/menus/:menu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"menus",
								":menu"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "menu",
									"value": "do nostrud",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/menus/:menu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"menus",
								":menu"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "menu",
									"value": "do nostrud",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test [templates]",
			"item": [
				{
					"name": "Sign in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"token\");\r",
									"const t = parseInt(pm.environment.get('temps'))\r",
									"const name = \"token\";\r",
									"\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('response should have a `token` in his fields', () => pm.expect(pm.response.json().data).to.have.property(name))\r",
									"pm.environment.set(name, pm.response.json().data.token)\r",
									"\r",
									"pm.test(\r",
									" \"`token` value should be set in environment variables\",\r",
									" () => pm.expect(pm.response.json().data.token).to.eql(pm.environment.get(name))\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"'token` value should be not null\",\r",
									" () => pm.expect(pm.response.json().token).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\"User field exist\", function(){\r",
									"    pm.expect(pm.response.json().data).to.have.property('user')\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Token = \" + pm.response.json().data.token)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"john.doe@up.coop\",\n    \"password\": \"up.coop\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"login"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display  template of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of templates should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Total = \" + pm.response.json().data.total)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"templates"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store a newly created resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"template_file = \" + pm.response.json().data.data.template_file)\r",
									"pm.environment.set('id_template', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"azerty\" + Math.floor((Math.random() * 500) + 1);\r",
									"const description = \"Description....\" + Math.floor((Math.random() * 500) + 1);\r",
									"const name = \"N_Name\" + Math.floor((Math.random() * 500) + 1);\r",
									"const template_file = \"file\" + Math.floor((Math.random() * 500) + 1) + \".json\";\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('description', JSON.stringify(description));\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"pm.variables.set('template_file', JSON.stringify(template_file));\r",
									"console.log(code);\r",
									"console.log(name);\r",
									"console.log(description);\r",
									"console.log(template_file);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"description\": {{description}},\n    \"name\":  {{name}},\n    \"template_file\": {{template_file}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"templates"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display  template of the resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json()).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									"    \"Number of templates should be not bellow or equal to 0\",\r",
									"    () => pm.expect(pm.response.json().data.total).to.be.above(0)\r",
									")\r",
									"\r",
									"console.log(\"Total = \" + pm.response.json().data.total)\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"templates"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"template_file = \" + pm.response.json().data.data.template_file)\r",
									"pm.environment.set('id_template', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/templates/:template",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"templates",
								":template"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "template",
									"value": "{{id_template}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"template_file = \" + pm.response.json().data.data.template_file)\r",
									"pm.environment.set('id_template', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"qwerty\" + Math.floor((Math.random() * 500) + 1);\r",
									"const description = \"Description....\" + Math.floor((Math.random() * 500) + 1);\r",
									"const name = \"nnom\" + Math.floor((Math.random() * 500) + 1);\r",
									"const template_file = \"file\" + Math.floor((Math.random() * 500) + 1) + \".json\";\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('description', JSON.stringify(description));\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"pm.variables.set('template_file', JSON.stringify(template_file));\r",
									"console.log(code);\r",
									"console.log(name);\r",
									"console.log(description);\r",
									"console.log(template_file);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"description\": {{description}},\n    \"name\":  {{name}},\n    \"template_file\": {{template_file}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/templates/:template",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"templates",
								":template"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "template",
									"value": "{{id_template}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"template_file = \" + pm.response.json().data.data.template_file)\r",
									"pm.environment.set('id_template', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/templates/:template",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"templates",
								":template"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "template",
									"value": "{{id_template}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the specified resource in storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"template_file = \" + pm.response.json().data.data.template_file)\r",
									"pm.environment.set('id_template', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const code = \"aqwwerty\" + Math.floor((Math.random() * 500) + 1);\r",
									"const description = \"Description....\" + Math.floor((Math.random() * 500) + 1);\r",
									"const name = \"nnom\" + Math.floor((Math.random() * 500) + 1);\r",
									"const template_file = \"file\" + Math.floor((Math.random() * 500) + 1) + \".json\";\r",
									"pm.variables.set('code', JSON.stringify(code));\r",
									"pm.variables.set('description', JSON.stringify(description));\r",
									"pm.variables.set('name', JSON.stringify(name));\r",
									"pm.variables.set('template_file', JSON.stringify(template_file));\r",
									"console.log(code);\r",
									"console.log(name);\r",
									"console.log(description);\r",
									"console.log(template_file);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": {{code}},\n    \"description\": {{description}},\n    \"name\":  {{name}},\n    \"template_file\": {{template_file}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/templates/:template",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"templates",
								":template"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "template",
									"value": "{{id_template}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									" \"Return Data test\",\r",
									" () => pm.expect(pm.response.json().data).to.have.property('data')\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"name is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.name).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"code is not undefined?\",\r",
									" () => pm.expect(pm.response.json().data.data.code).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"description is not equal to undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.description).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"id not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.id).is.not.undefined\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not null ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).to.not.be.null\r",
									")\r",
									"\r",
									"pm.test(\r",
									" \"template_file not undefined ?\",\r",
									" () => pm.expect(pm.response.json().data.data.template_file).is.not.undefined\r",
									")\r",
									"\r",
									"console.log(\"success = \" + pm.response.json().success)\r",
									"console.log(\"id = \" + pm.response.json().data.data.id)\r",
									"console.log(\"name = \" + pm.response.json().data.data.name)\r",
									"console.log(\"code = \" + pm.response.json().data.data.code)\r",
									"console.log(\"description = \" + pm.response.json().data.data.description)\r",
									"console.log(\"template_file = \" + pm.response.json().data.data.template_file)\r",
									"pm.environment.set('id_template', pm.response.json().data.data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/templates/:template",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"templates",
								":template"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "template",
									"value": "{{id_template}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove the specified resource from storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/templates/:template",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"templates",
								":template"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "template",
									"value": "{{id_template}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Display the specified resource.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success = false\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(false)\r",
									"})\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/templates/:template",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"templates",
								":template"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								},
								{
									"key": "template",
									"value": "{{id_template}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const t = parseInt(pm.environment.get('temps'))\r",
									"pm.test(\"Status test (Code 200)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Time response test\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(t);\r",
									"});\r",
									"\r",
									"pm.test (\"Result is a JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Success\", function(){\r",
									"    pm.expect(pm.response.json().success).to.eql(true)\r",
									"})\r",
									"\r",
									"pm.test(\r",
									"    \"Test if logged out\",\r",
									"    () => pm.expect(pm.response.json().message).to.eql(\"You logged out successfully\")\r",
									")\r",
									"\r",
									"console.log(\"Success = \" + pm.response.json().success)\r",
									"pm.environment.unset(\"token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/:tenant/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":tenant",
								"api",
								"v1",
								"logout"
							],
							"variable": [
								{
									"key": "tenant",
									"value": "{{tenant}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({",
					"    key: 'accept',",
					"    value: 'application/json'",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}